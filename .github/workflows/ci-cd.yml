# .github/workflows/ci-cd.yml

name: Java CI/CD Pipeline

# Grant write permission to contents for the GITHUB_TOKEN
permissions:
  contents: write # Needed for git push in the auto-merge job
  packages: write # Needed for Docker build cache (optional but recommended)

on:
  # Triggers the workflow on push events for branches matching these patterns AND master
  push:
    branches:
      - 'feature/**' # Matches feature/ or feature/something/else
      - 'fix/**'     # Matches fix/ or fix/something/else
      - master       # Trigger on master for Docker build/push

  # Allows you to run this workflow manually from the Actions tab (optional)
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: # Define outputs for other jobs if needed (e.g., artifact name)
      artifact_name: ${{ steps.get_artifact_name.outputs.name }}
      artifact_path: target/${{ steps.get_artifact_name.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 
        uses: actions/setup-java@v4
        with:
          java-version: '21' 
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests

      # Optional: Get the artifact name dynamically (adjust pattern if needed)
      - name: Get artifact name
        id: get_artifact_name
        run: echo "name=$(ls target/*.jar | xargs basename)" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-build # Name of the artifact in GitHub Actions UI
          path: target/*.jar # Path to the built JAR file(s)

  test:
    runs-on: ubuntu-latest
    needs: build # This job runs only after 'build' completes successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Checkout again as jobs run on fresh VMs

      - name: Set up JDK 21 
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # No need to download artifact if tests run against source code directly
      # If tests needed the JAR, you would add a download-artifact step here

      - name: Test with Maven
        run: mvn test # Runs tests using Surefire plugin

  auto_merge_to_develop:
    # Only run this job on pushes to feature/** or fix/** branches
    if: (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/fix/'))
    runs-on: ubuntu-latest
    needs: test # This job runs only after 'test' completes successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Fetch all history for all tags and branches needed for merge
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions-bot@github.com"

      - name: Merge feature/fix branch into develop
        run: |
          # Get the name of the branch that triggered the workflow
          CURRENT_BRANCH="${{ github.ref_name }}"

          echo "Checking out develop branch..."
          git checkout develop
          git pull origin develop # Ensure develop is up-to-date before merge

          echo "Merging branch '$CURRENT_BRANCH' into develop..."
          # Use --no-ff to create a merge commit for better history tracking
          git merge --no-ff "$CURRENT_BRANCH" -m "Auto-merge branch '$CURRENT_BRANCH' after successful CI"

          echo "Pushing updated develop branch..."
          git push origin develop

  docker_build_push:
    # Only run this job on pushes to the master branch
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test # This job runs only after 'test' completes successfully on master
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Fetch all history for all tags and branches needed for accurate tagging
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Give this step an ID so we can reference its outputs
        uses: docker/metadata-action@v5
        with:
          # Define the image name based on your Docker Hub username and repo name
          # IMPORTANT: Replace 'your-dockerhub-username' with your actual Docker Hub username!
          images: anggian/personal-website
          # Define tags: 'latest' and the git commit SHA (short version)
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          push: true # Push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata step
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata step
          cache-from: type=gha # Enable GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max