# .github/workflows/ci-cd.yml

name: Java CI/CD Pipeline

on:
  # Trigger on pushes to master (for deployment)
  push:
    branches: [ master ]
  # Trigger on PRs targeting develop (for testing and auto-merge)
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ] # Trigger on PR open, update, reopen

  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build and Test with Maven
        run: ./mvnw clean install

      - name: Upload Unit Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports-${{ github.run_id }}
          path: target/surefire-reports/

  # New Job: Auto-merge to develop after successful PR build/test
  auto_merge_to_develop:
    runs-on: ubuntu-latest
    # Only run this job if the event is a pull_request and build_and_test succeeded
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    needs: build_and_test # Depends on the build_and_test job

    steps:
      - name: Checkout Code with Full History
        uses: actions/checkout@v4
        with:
          # We need the full history to merge correctly
          fetch-depth: 0
          # Use a PAT here if develop is protected and GITHUB_TOKEN lacks permissions
          # token: ${{ secrets.AUTO_MERGE_PAT }} # We will add this later if needed

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@users.noreply.github.com"

      - name: Merge PR branch into develop
        run: |
          # Get the name of the branch being merged (the head branch of the PR)
          PR_BRANCH="${{ github.head_ref }}"

          echo "Checking out develop branch..."
          git checkout develop

          echo "Pulling latest changes for develop..."
          git pull origin develop

          echo "Merging branch '$PR_BRANCH' into develop..."
          # Use --no-ff to create a merge commit, preserving history
          git merge --no-ff "$PR_BRANCH" -m "Merge pull request #${{ github.event.number }} from $PR_BRANCH"

          echo "Pushing updated develop branch..."
          git push origin develop